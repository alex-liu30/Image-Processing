@mrjloswald

/*
How to Use This Code

1. Save the Code:
a) Copy the entire code above and paste it into a text file.
b) Save the file by naming it "ConvolutionTool.swift".

2. Set Input and Output Paths:
a) Change the line let imagePath = "/path/to/your/image.jpg" to point to the actual path of your input image file.
b) Change the output paths inside the loop if desired.

3. Compile the Code:
a) Open your terminal and navigate to the directory where you saved the ConvolutionTool.swift file.
b) Compile the Swift file using the following command: swiftc ConvolutionTool.swift -o ConvolutionTool

4. Run the Program:
a) Run the compiled program with: ./ConvolutionTool

5. Check Output:
a) After running the program, check your specified output paths for both the blurred and edge-detected images.

*/

import Foundation
import CoreGraphics
import UIKit

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        imageStack.append(inputImage)
    }

    func convolve(kernel: [[Float]], region: CGRect? = nil) {
        guard let image = imageStack[currentIndex].cgImage else { return }
        let width = region?.width ?? CGFloat(image.width)
        let height = region?.height ?? CGFloat(image.height)
        let kernelSize = kernel.count, halfKernelSize = kernelSize / 2
        
        guard let context = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpaceCreateDeviceRGB(), bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue) else { return }
        context.draw(image, in: region ?? CGRect(x: 0, y: 0, width: width, height: height))
        
        guard let buffer = context.data?.bindMemory(to: UInt8.self, capacity: Int(width * height * 4)) else { return }
        var outputBuffer = [UInt8](repeating: 0, count: Int(width * height * 4))
        
        for y in 0..<Int(height) {
            for x in 0..<Int(width) {
                var sum = [Float](repeating: 0, count: 3)
                for ky in -halfKernelSize...halfKernelSize {
                    for kx in -halfKernelSize...halfKernelSize {
                        let px = min(max(x + kx, 0), Int(width) - 1)
                        let py = min(max(y + ky, 0), Int(height) - 1)
                        let i = (py * Int(width) + px) * 4
                        let k = kernel[ky + halfKernelSize][kx + halfKernelSize]
                        for c in 0..<3 { sum[c] += Float(buffer[i + c]) * k }
                    }
                }
                let o = (y * Int(width) + x) * 4
                for c in 0..<3 { outputBuffer[o + c] = UInt8(min(max(Int(sum[c]), 0), 255)) }
                outputBuffer[o + 3] = buffer[o + 3]
            }
        }
        
        if let outputImage = CGContext(data: &outputBuffer, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: Int(width) * 4, space: CGColorSpaceCreateDeviceRGB(), bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue)?.makeImage().flatMap({ UIImage(cgImage: $0) }) {
            if region != nil {
                UIGraphicsBeginImageContext(imageStack[currentIndex].size)
                imageStack[currentIndex].draw(in: CGRect(origin: .zero, size: imageStack[currentIndex].size))
                outputImage.draw(in: region!)
                imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
                UIGraphicsEndImageContext()
            } else {
                imageStack.append(outputImage)
            }
            currentIndex += 1
        }
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { currentIndex = 0 }
    func save(to path: String) { try? imageStack[currentIndex].pngData()?.write(to: URL(fileURLWithPath: path)) }
}

func main() {
    print("Enter image path:")
    guard let path = readLine(), let editor = ImageEditor(path: path) else { fatalError("Failed to load image") }

    let kernels: [String: [[Float]]] = [
        "Gaussian Blur": [[1/16, 2/16, 1/16], [2/16, 4/16, 2/16], [1/16, 2/16, 1/16]],
        "Laplacian": [[0, -1, 0], [-1, 4, -1], [0, -1, 0]]
    ]

    while true {
        print("\nCommands: apply <filter> [x y width height], undo, redo, save <path>, revert, quit")
        guard let input = readLine()?.lowercased().split(separator: " ") else { continue }
        switch input[0] {
        case "apply":
            guard input.count >= 2, let kernel = kernels[String(input[1])] else { print("Invalid filter"); continue }
            let region = input.count == 6 ? CGRect(x: Double(input[2])!, y: Double(input[3])!, width: Double(input[4])!, height: Double(input[5])!) : nil
            editor.convolve(kernel: kernel, region: region)
        case "undo": editor.undo()
        case "redo": editor.redo()
        case "save": if input.count == 2 { editor.save(to: String(input[1])) }
        case "revert": editor.revertToOriginal()
        case "quit": return
        default: print("Unknown command")
        }
    }
}

main()
