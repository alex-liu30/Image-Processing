@mrjloswald

/*

How to Use This Code

1. Save the Code:
a) Copy the entire code above and paste it into a text file.
b) Save the file by naming it "GrayscaleConverter.swift".

2. Set Input and Output Paths:
a) Change the line let imagePath = "/path/to/your/image.jpg" to point to the actual path of your input image file.
b) Change the line let outputPath = "/path/to/your/output_image.png" to specify where you want to save the processed image.

3. Compile the Code:
a) Open your terminal and navigate to the directory where you saved the GrayscaleConverter.swift file.
b) Compile the Swift file using the following command: swiftc GrayscaleConverter.swift -o GrayscaleConverter

4. Run the Program:
Run the compiled program with: ./GrayscaleConverter

5. Follow Prompts:
When prompted in the terminal, enter the number of shades of gray you want (between 2 and 256).
*/

import Foundation
import CoreGraphics
import UIKit

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0
    private let originalImage: UIImage

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        self.originalImage = inputImage
        self.imageStack.append(inputImage)
    }

    func applyGrayscale(shades: Int, region: CGRect? = nil) {
        guard let currentImage = imageStack[currentIndex], let cgImage = currentImage.cgImage else { return }
        let width = region?.width ?? CGFloat(cgImage.width)
        let height = region?.height ?? CGFloat(cgImage.height)

        guard let context = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpaceCreateDeviceGray(), bitmapInfo: 0) else { return }
        
        context.draw(cgImage, in: region ?? CGRect(x: 0, y: 0, width: width, height: height))
        guard let buffer = context.data?.bindMemory(to: UInt8.self, capacity: Int(width * height)) else { return }

        for i in 0..<Int(width * height) {
            buffer[i] = (buffer[i] * UInt8(shades - 1)) / 255
        }

        guard let outputCGImage = context.makeImage() else { return }
        let outputImage = UIImage(cgImage: outputCGImage)

        if let region = region {
            UIGraphicsBeginImageContext(currentImage.size)
            currentImage.draw(in: CGRect(origin: .zero, size: currentImage.size))
            outputImage.draw(in: region)
            imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
            UIGraphicsEndImageContext()
        } else {
            imageStack.append(outputImage)
        }
        
        currentIndex += 1
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { imageStack = [originalImage]; currentIndex = 0 }
    
    func save(to path: String) {
        guard let data = imageStack[currentIndex].pngData() else { return }
        try? data.write(to: URL(fileURLWithPath: path))
    }
}

func main() {
    print("Enter the path to your image:", terminator: " ")
    guard let imagePath = readLine(), let editor = ImageEditor(path: imagePath) else {
        print("Failed to load image")
        return
    }

    while true {
        print("\nCommands: grayscale, undo, redo, save, revert, region, quit")
        print("Enter command:", terminator: " ")
        
        guard let command = readLine()?.lowercased() else { continue }
        
        switch command {
        case "grayscale":
            print("Enter shades (2-256): ", terminator: "")
            if let input = readLine(), let shades = Int(input), shades >= 2 && shades <= 256 {
                editor.applyGrayscale(shades: shades)
                print("Grayscale applied.")
            } else {
                print("Invalid input.")
            }
        case "undo": editor.undo(); print("Undo performed.")
        case "redo": editor.redo(); print("Redo performed.")
        case "save":
            print("Enter output path:", terminator: " ")
            if let path = readLine() { editor.save(to: path); print("Saved to \(path).") }
        case "revert": editor.revertToOriginal(); print("Reverted to original.")
        case "region":
            print("Enter region (x y width height):", terminator: " ")
            if let regionInput = readLine(),
               let values = regionInput.split(separator: " ").compactMap({ CGFloat(String($0)) }), values.count == 4 {
                editor.applyGrayscale(shades: 256, region: CGRect(x: values[0], y: values[1], width: values[2], height: values[3]))
                print("Applied grayscale to region.")
            } else {
                print("Invalid region input.")
            }
        case "quit": return
        default: print("Unknown command.")
        }
    }
}

main()
