@mrjloswald

/*
1. Save the Code:
a) Copy the entire code above and paste it into a text file.
b) Save the file by naming it HighPassSharpen.swift.

2. Set Input and Output Paths:
a) Change the line let imagePath = "/path/to/your/image.jpg" to point to the actual path of your input image file.
b) Change the line let outputPath = "/path/to/your/output_image.png" to specify where you want to save the processed image.

3. Compile the Code:
a) Open your terminal and navigate to the directory where you saved the HighPassSharpen.swift file.
b) Compile the Swift file using the following command: swiftc HighPassSharpen.swift -o HighPassSharpen

4. Run the Program:
a) Run the compiled program with: ./HighPassSharpen

5. Follow Prompts:
a) When prompted in the terminal, enter the blur radius for sharpening (between 0 and 100).

*/

import Foundation
import CoreGraphics
import UIKit

func highPassSharpen(image: UIImage, radius: CGFloat) -> UIImage? {
    guard let ciImage = CIImage(image: image) else { return nil }
    
    // Create a Gaussian blur filter to create the low-pass version
    let gaussianBlurFilter = CIFilter(name: "CIGaussianBlur")!
    gaussianBlurFilter.setValue(ciImage, forKey: kCIInputImageKey)
    gaussianBlurFilter.setValue(radius, forKey: kCIInputRadiusKey)
    
    guard let blurredImage = gaussianBlurFilter.outputImage else { return nil }
    
    // Subtract the blurred image from the original image
    let subtractFilter = CIFilter(name: "CISubtractBlendMode")!
    subtractFilter.setValue(ciImage, forKey: kCIInputImageKey)
    subtractFilter.setValue(blurredImage, forKey: kCIInputBackgroundImageKey)
    
    guard let sharpenedImage = subtractFilter.outputImage else { return nil }
    
    return UIImage(ciImage: sharpenedImage)
}

// Main execution starts here

let imagePath = "/path/to/your/image.jpg" // Change this line to your image path
guard let inputImage = UIImage(contentsOfFile: imagePath) else {
    print("Failed to load image")
    exit(1)
}

print("Enter blur radius for sharpening (0-100): ", terminator: "")
guard let radiusInput = readLine(), let radius = CGFloat(Double(radiusInput) ?? 0), radius >= 0 && radius <= 100 else {
    print("Invalid input. Please enter a number between 0 and 100.")
    exit(1)
}

if let outputImage = highPassSharpen(image: inputImage, radius: radius) {
    print("High-pass sharpening applied successfully.")
    
    // Save the output image (you can specify the output path)
    let outputPath = "/path/to/your/output_image.png" // Change this line to your desired output path
    
    guard let data = outputImage.pngData() else {
        print("Failed to convert image to PNG data.")
        exit(1)
    }
    
    do {
        try data.write(to: URL(fileURLWithPath: outputPath))
        print("Output image saved to \(outputPath)")
    } catch {
        print("Failed to save image: \(error)")
    }
} else {
    print("Failed to apply high-pass sharpening.")
}
