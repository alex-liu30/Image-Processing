@mrjloswald

/*
1. Save the Code:
a) Copy the entire code above and paste it into a text file.
b) Save the file by naming it HighPassSharpen.swift.

2. Set Input and Output Paths:
a) Change the line let imagePath = "/path/to/your/image.jpg" to point to the actual path of your input image file.
b) Change the line let outputPath = "/path/to/your/output_image.png" to specify where you want to save the processed image.

3. Compile the Code:
a) Open your terminal and navigate to the directory where you saved the HighPassSharpen.swift file.
b) Compile the Swift file using the following command: swiftc HighPassSharpen.swift -o HighPassSharpen

4. Run the Program:
a) Run the compiled program with: ./HighPassSharpen

5. Follow Prompts:
a) When prompted in the terminal, enter the blur radius for sharpening (between 0 and 100).

*/
import Foundation
import CoreGraphics
import UIKit

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        imageStack.append(inputImage)
    }

    func highPassSharpen(radius: CGFloat, region: CGRect? = nil) {
        guard let ciImage = CIImage(image: imageStack[currentIndex]) else { return }
        let blurFilter = CIFilter(name: "CIGaussianBlur")!
        blurFilter.setValue(ciImage, forKey: kCIInputImageKey)
        blurFilter.setValue(radius, forKey: kCIInputRadiusKey)
        guard let blurredImage = blurFilter.outputImage else { return }
        
        let subtractFilter = CIFilter(name: "CISubtractBlendMode")!
        subtractFilter.setValue(ciImage, forKey: kCIInputImageKey)
        subtractFilter.setValue(blurredImage, forKey: kCIInputBackgroundImageKey)
        guard let sharpenedImage = subtractFilter.outputImage else { return }
        
        if let region = region {
            UIGraphicsBeginImageContext(imageStack[currentIndex].size)
            imageStack[currentIndex].draw(in: CGRect(origin: .zero, size: imageStack[currentIndex].size))
            UIImage(ciImage: sharpenedImage).draw(in: region)
            imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
            UIGraphicsEndImageContext()
        } else {
            imageStack.append(UIImage(ciImage: sharpenedImage))
        }
        currentIndex += 1
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { currentIndex = 0 }
    func save(to path: String) { try? imageStack[currentIndex].pngData()?.write(to: URL(fileURLWithPath: path)) }
}

func main() {
    print("Enter image path:")
    guard let path = readLine(), let editor = ImageEditor(path: path) else { fatalError("Failed to load image") }

    while true {
        print("\nCommands: sharpen <radius> [x y width height], undo, redo, save <path>, revert, quit")
        guard let input = readLine()?.lowercased().split(separator: " ") else { continue }
        switch input[0] {
        case "sharpen":
            guard input.count >= 2, let radius = CGFloat(input[1]) else { print("Invalid radius"); continue }
            let region = input.count == 6 ? CGRect(x: Double(input[2])!, y: Double(input[3])!, width: Double(input[4])!, height: Double(input[5])!) : nil
            editor.highPassSharpen(radius: radius, region: region)
        case "undo": editor.undo()
        case "redo": editor.redo()
        case "save": if input.count == 2 { editor.save(to: String(input[1])) }
        case "revert": editor.revertToOriginal()
        case "quit": return
        default: print("Unknown command")
        }
    }
}

main()
