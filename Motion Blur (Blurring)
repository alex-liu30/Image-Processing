@mrjloswald

/*

1. Save the Code:
Copy the entire code for each tool and save it as a separate .swift file (e.g. "ImageEditor.swift").

2. Compile the Code:
a) Open your terminal and navigate to the directory containing the .swift file.

b) Compile using the command: swiftc ImageEditor.swift -o ImageEditor

3. Run the Program:
Execute the compiled program: ./ImageEditor

4. Follow Prompt: blur <radius> <angle> [x y width height]


Note: General commands for all tools:
undo: Undo the last operation
redo: Redo the last undone operation
save <path>: Save the current image
revert: Return to the original image
quit: Exit the program

5. Optional Region Processing:
For each effect, you can specify a region to apply it to by adding x, y, width, and height values after the command.

*/

import Foundation
import CoreImage
import UIKit

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        imageStack.append(inputImage)
    }

    func applyMotionBlur(radius: CGFloat, angle: CGFloat, region: CGRect? = nil) {
        guard let ciImage = CIImage(image: imageStack[currentIndex]) else { return }
        let filter = CIFilter(name: "CIMotionBlur")!
        filter.setValue(ciImage, forKey: kCIInputImageKey)
        filter.setValue(radius, forKey: kCIInputRadiusKey)
        filter.setValue(angle * .pi / 180, forKey: kCIInputAngleKey)
        guard let outputImage = filter.outputImage else { return }

        if let region = region {
            UIGraphicsBeginImageContext(imageStack[currentIndex].size)
            imageStack[currentIndex].draw(in: CGRect(origin: .zero, size: imageStack[currentIndex].size))
            UIImage(ciImage: outputImage).draw(in: region)
            imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
            UIGraphicsEndImageContext()
        } else {
            imageStack.append(UIImage(ciImage: outputImage))
        }
        currentIndex += 1
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { currentIndex = 0 }
    func save(to path: String) { try? imageStack[currentIndex].pngData()?.write(to: URL(fileURLWithPath: path)) }
}

func main() {
    print("Enter image path:")
    guard let path = readLine(), let editor = ImageEditor(path: path) else { fatalError("Failed to load image") }

    while true {
        print("\nCommands: blur <radius> <angle> [x y width height], undo, redo, save <path>, revert, quit")
        guard let input = readLine()?.lowercased().split(separator: " ") else { continue }
        switch input[0] {
        case "blur":
            guard input.count >= 3, let radius = CGFloat(input[1]), let angle = CGFloat(input[2]) else { print("Invalid input"); continue }
            let region = input.count == 7 ? CGRect(x: Double(input[3])!, y: Double(input[4])!, width: Double(input[5])!, height: Double(input[6])!) : nil
            editor.applyMotionBlur(radius: radius, angle: angle, region: region)
        case "undo": editor.undo()
        case "redo": editor.redo()
        case "save": if input.count == 2 { editor.save(to: String(input[1])) }
        case "revert": editor.revertToOriginal()
        case "quit": return
        default: print("Unknown command")
        }
    }
}

main()
