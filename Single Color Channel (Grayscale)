@mrjloswald

/*
1. Save the Code:
Copy the entire code and save it as a separate .swift file with a name of: SingleColorChannel.swift

2. Compile the Code:
a) Open your terminal and navigate to the directory containing the .swift file.
b) Compile using the command: swiftc <filename>.swift -o <outputname>
For example: swiftc AdaptiveThresholding.swift -o AdaptiveThresholding

3. Run the Program:
Execute the compiled program using: ./<outputname>
For example: ./AdaptiveThresholding


4. Use Command: grayscale <channel> [x y width height]

Note: General commands for all tools:
undo: Undo the last operation
redo: Redo the last undone operation
save <path>: Save the current image
revert: Return to the original image
quit: Exit the program

5. Optional Region Processing:
For each effect, you can specify a region to apply it to by adding x, y, width, and height values after the command.
*/

import Foundation
import CoreGraphics
import UIKit

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        imageStack.append(inputImage)
    }

    func convertToGrayscaleUsingChannel(channel: Int, region: CGRect? = nil) {
        guard let cgImage = imageStack[currentIndex].cgImage else { return }
        let width = region?.width ?? CGFloat(cgImage.width)
        let height = region?.height ?? CGFloat(cgImage.height)
        
        guard let context = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpaceCreateDeviceRGB(), bitmapInfo: CGImageAlphaInfo.none.rawValue) else { return }
        
        context.draw(cgImage, in: region ?? CGRect(x: 0, y: 0, width: width, height: height))
        
        guard let buffer = context.data?.bindMemory(to: UInt8.self, capacity: Int(width * height * 4)) else { return }
        
        for i in 0..<Int(width * height) {
            let index = i * 4
            let grayValue = buffer[index + channel]
            buffer[index] = grayValue
            buffer[index + 1] = grayValue
            buffer[index + 2] = grayValue
        }
        
        if let outputImage = context.makeImage().flatMap({ UIImage(cgImage: $0) }) {
            if region != nil {
                UIGraphicsBeginImageContext(imageStack[currentIndex].size)
                imageStack[currentIndex].draw(in: CGRect(origin: .zero, size: imageStack[currentIndex].size))
                outputImage.draw(in: region!)
                imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
                UIGraphicsEndImageContext()
            } else {
                imageStack.append(outputImage)
            }
            currentIndex += 1
        }
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { currentIndex = 0 }
    func save(to path: String) { try? imageStack[currentIndex].pngData()?.write(to: URL(fileURLWithPath: path)) }
}

func main() {
    print("Enter image path:")
    guard let path = readLine(), let editor = ImageEditor(path: path) else { fatalError("Failed to load image") }

    while true {
        print("\nCommands: grayscale <channel> [x y width height], undo, redo, save <path>, revert, quit")
        guard let input = readLine()?.lowercased().split(separator: " ") else { continue }
        switch input[0] {
        case "grayscale":
            guard input.count >= 2, let channel = Int(input[1]), (0...2).contains(channel) else { print("Invalid channel"); continue }
            let region = input.count == 6 ? CGRect(x: Double(input[2])!, y: Double(input[3])!, width: Double(input[4])!, height: Double(input[5])!) : nil
            editor.convertToGrayscaleUsingChannel(channel: channel, region: region)
        case "undo": editor.undo()
        case "redo": editor.redo()
        case "save": if input.count == 2 { editor.save(to: String(input[1])) }
        case "revert": editor.revertToOriginal()
        case "quit": return
        default: print("Unknown command")
        }
    }
}

main()
