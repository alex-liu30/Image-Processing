@mrjloswald

/*
1. Save the Code:
Copy the entire code for each tool and save it as a separate .swift file (e.g. "ImageEditor.swift").

2. Compile the Code:
a) Open your terminal and navigate to the directory containing the .swift file.

b) Compile using the command: swiftc ImageEditor.swift -o ImageEditor

3. Run the Program:
Execute the compiled program: ./ImageEditor

4. Use Command: decompose <max/min> [x y width height]

For each effect, you can specify a region to apply it to by adding x, y, width, and height values after the command.

*/
import Foundation
import CoreGraphics
import UIKit

enum DecompositionType { case maximum, minimum }

class ImageEditor {
    private var imageStack: [UIImage] = []
    private var currentIndex = 0

    init?(path: String) {
        guard let inputImage = UIImage(contentsOfFile: path) else { return nil }
        imageStack.append(inputImage)
    }

    func decomposeToGrayscale(type: DecompositionType, region: CGRect? = nil) {
        guard let cgImage = imageStack[currentIndex].cgImage else { return }
        let width = region?.width ?? CGFloat(cgImage.width)
        let height = region?.height ?? CGFloat(cgImage.height)
        
        guard let context = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpaceCreateDeviceRGB(), bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue) else { return }
        
        context.draw(cgImage, in: region ?? CGRect(x: 0, y: 0, width: width, height: height))
        
        guard let buffer = context.data?.bindMemory(to: UInt8.self, capacity: Int(width * height * 4)) else { return }
        
        for i in stride(from: 0, to: Int(width * height * 4), by: 4) {
            let gray = type == .maximum ? max(buffer[i], buffer[i+1], buffer[i+2]) : min(buffer[i], buffer[i+1], buffer[i+2])
            buffer[i] = gray; buffer[i+1] = gray; buffer[i+2] = gray
        }
        
        if let outputImage = context.makeImage().flatMap({ UIImage(cgImage: $0) }) {
            if region != nil {
                UIGraphicsBeginImageContext(imageStack[currentIndex].size)
                imageStack[currentIndex].draw(in: CGRect(origin: .zero, size: imageStack[currentIndex].size))
                outputImage.draw(in: region!)
                imageStack.append(UIGraphicsGetImageFromCurrentImageContext()!)
                UIGraphicsEndImageContext()
            } else {
                imageStack.append(outputImage)
            }
            currentIndex += 1
        }
    }

    func undo() { if currentIndex > 0 { currentIndex -= 1 } }
    func redo() { if currentIndex < imageStack.count - 1 { currentIndex += 1 } }
    func revertToOriginal() { currentIndex = 0 }
    func save(to path: String) { try? imageStack[currentIndex].pngData()?.write(to: URL(fileURLWithPath: path)) }
}

func main() {
    print("Enter image path:")
    guard let path = readLine(), let editor = ImageEditor(path: path) else { fatalError("Failed to load image") }

    while true {
        print("\nCommands: decompose <max/min> [x y width height], undo, redo, save <path>, revert, quit")
        guard let input = readLine()?.lowercased().split(separator: " ") else { continue }
        switch input[0] {
        case "decompose":
            guard input.count >= 2 else { print("Invalid input"); continue }
            let type: DecompositionType = input[1] == "max" ? .maximum : .minimum
            let region = input.count == 6 ? CGRect(x: Double(input[2])!, y: Double(input[3])!, width: Double(input[4])!, height: Double(input[5])!) : nil
            editor.decomposeToGrayscale(type: type, region: region)
        case "undo": editor.undo()
        case "redo": editor.redo()
        case "save": if input.count == 2 { editor.save(to: String(input[1])) }
        case "revert": editor.revertToOriginal()
        case "quit": return
        default: print("Unknown command")
        }
    }
}

main()
