@mrjloswald

/*

1. Save the Code:
Copy the entire code and save it as "ImageEditor.swift".

2. Compile the Code:
a) Open your terminal and navigate to the directory containing the .swift file.

b) Compile using the command: swiftc ImageEditor.swift -o ImageEditor

3. Run the Program:
Execute the compiled program: ./ImageEditor

4. Use Command: threshold [x y width height]

Note: General commands for all tools:
undo: Undo the last operation
redo: Redo the last undone operation
save <path>: Save the current image
revert: Return to the original image
quit: Exit the program

5. Optional Region Processing:
For each effect, you can specify a region to apply it to by adding x, y, width, and height values after the command.
which one is the converter with user specified stuff
*/

import Foundation
import CoreImage
import CoreGraphics
import ImageIO

class ImageEditor {
    private var originalImage: CIImage
    private var image: CIImage
    private var undoStack: [CIImage] = []
    private var redoStack: [CIImage] = []
    
    init?(path: String) {
        guard let image = CIImage(contentsOf: URL(fileURLWithPath: path)) else { return nil }
        self.originalImage = image
        self.image = image
    }
    
    func apply(_ effect: (CIImage) -> CIImage, to region: CGRect? = nil) {
        undoStack.append(image)
        redoStack.removeAll()
        if let region = region {
            let maskedImage = image.cropped(to: region)
            let effectedRegion = effect(maskedImage)
            image = image.composited(over: effectedRegion)
        } else {
            image = effect(image)
        }
    }
    
    func undo() { if let prev = undoStack.popLast() { redoStack.append(image); image = prev } }
    func redo() { if let next = redoStack.popLast() { undoStack.append(image); image = next } }
    
    func revertToOriginal() {
        undoStack.append(image)
        redoStack.removeAll()
        image = originalImage
    }
    
    func applyAdaptiveThreshold(to region: CGRect? = nil) {
        apply({ img in
            let filter = CIFilter(name: "CIColorControls")!
            filter.setValue(img, forKey: kCIInputImageKey)
            filter.setValue(1.0, forKey: kCIInputSaturationKey)
            filter.setValue(0.0, forKey: kCIInputBrightnessKey)
            filter.setValue(1.0, forKey: kCIInputContrastKey)
            return filter.outputImage ?? img
        }, to: region)
    }
    
    func save(to path: String) throws {
        let context = CIContext()
        guard let cgImage = context.createCGImage(image, from: image.extent) else {
            throw NSError(domain: "ImageEditorError", code: 1, userInfo: [NSLocalizedDescriptionKey: "Failed to create CGImage"])
        }
        
        guard let destination = CGImageDestinationCreateWithURL(URL(fileURLWithPath: path) as CFURL, kUTTypePNG, 1, nil) else {
            throw NSError(domain: "ImageEditorError", code: 2, userInfo: [NSLocalizedDescriptionKey: "Failed to create image destination"])
        }
        
        CGImageDestinationAddImage(destination, cgImage, nil)
        
        guard CGImageDestinationFinalize(destination) else {
            throw NSError(domain: "ImageEditorError", code: 3, userInfo: [NSLocalizedDescriptionKey: "Failed to save image"])
        }
    }
}

func main() {
    guard CommandLine.arguments.count > 1 else {
        print("Usage: <program_name> <path_to_image>")
        return
    }
    
    guard let editor = ImageEditor(path: CommandLine.arguments[1]) else {
        print("Failed to load image")
        return
    }
    
    while true {
        print("\nCommands: threshold, undo, redo, save, quit, revert, region")
        print("Enter command:", terminator: " ")
        
        guard let command = readLine()?.lowercased() else { continue }
        
        switch command {
        case "threshold":
            editor.applyAdaptiveThreshold()
            print("Applied adaptive threshold")
        case "undo":
            editor.undo()
            print("Undo performed")
        case "redo":
            editor.redo()
            print("Redo performed")
        case "save":
            print("Enter output path:", terminator: " ")
            guard let path = readLine() else { continue }
            do {
                try editor.save(to: path)
                print("Image saved to \(path)")
            } catch {
                print("Failed to save: \(error)")
            }
        case "quit":
            return
        case "revert":
            editor.revertToOriginal()
            print("Reverted to original image")
        case "region":
            print("Enter region (x y width height):", terminator: " ")
            guard let regionInput = readLine(),
                  let regionValues = regionInput.split(separator: " ").map({ CGFloat(String($0)) }),
                  regionValues.count == 4 else {
                print("Invalid region input")
                continue
            }
            let region = CGRect(x: regionValues[0], y: regionValues[1], width: regionValues[2], height: regionValues[3])
            editor.applyAdaptiveThreshold(to: region)
            print("Applied adaptive threshold to region")
        default:
            print("Unknown command")
        }
    }
}

main()
